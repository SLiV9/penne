%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Penne
file_extensions:
  - pn
scope: source.penne

variables:
  identifier: '[[:alpha:]][_[:alnum:]]*|_[_[:alnum:]]+'
  int_suffixes: '[iu](8|16|32|64|128|size)'
  float_suffixes: 'f(32|64)'
  word_x: 'word(8|16|32|64|128)'

contexts:
  main:
    - include: comments

    - match: '\$'
      push: preprocessor_directive

    - match: '\b(pub|extern)\b'
      scope: storage.modifier.penne

    - match: '\b(const)\b'
      scope: keyword.other.penne
      push: const_declaration

    - match: '\b(fn)\s+(?={{identifier}})\b'
      captures:
        1: keyword.declaration.function.penne storage.type.function.penne
      push: fn_definition

    - match: '\b(struct|{{word_x}})\s+(?={{identifier}})\b'
      captures:
        1: keyword.declaration.struct.penne storage.type.struct.penne
      push: struct_declaration

  statements:
    - include: expressions
    - include: comments

    - match: '\b(if|else)\b'
      scope: keyword.control.conditional.penne

    - match: '\b(loop|goto)\b'
      scope: keyword.control.penne

    - match: '\b(var)\b'
      scope: keyword.other.penne
      push: var_declaration

    - match: '(?=\{)'
      push: block

    - match: '\b({{identifier}}):'
      scope: entity.name.label.penne

  expressions:
    - match: '"'
      scope: punctuation.definition.string.begin.penne
      push: double_quoted_string

    - match: "'"
      scope: punctuation.definition.string.begin.penne
      push: single_quoted_string

    - match: '\b((-)?[0-9][.0-9]*)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.penne
        3: storage.type.penne

    - match: '\b0x[0-9a-fA-F]+\b'
      scope: constant.numeric.penne

    - match: '\b0b[01]+\b'
      scope: constant.numeric.penne

    - match: '\b(true|false)\b'
      scope: constant.language.penne

    - match: '\b([.])({{identifier}})\b'
      captures:
        1: punctuation.accessor.penne

    - match: '\b({{identifier}})(?=\s*(\{))\b'
      captures:
        3: punctuation.definition.block.begin.penne
      push: struct_initialization

    - match: '\b(as)\b\s*'
      scope: keyword.operator.word.penne
      push:
        - match: '(?=,|;|=|\s)'
          pop: true
        - include: type

  double_quoted_string:
    - meta_scope: string.quoted.double.penne
    - match: '\\x[0-9a-fA-F]{2}'
      scope: constant.character.escape.penne
    - match: '\\.'
      scope: constant.character.escape.penne
    - match: '"'
      scope: punctuation.definition.string.end.penne
      pop: true
    - match: '\\$'
      scope: invalid.illegal.trailing-backslash
      pop: true
    - match: $
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.single.penne
    - match: '\\x[0-9a-fA-F]{2}'
      scope: constant.character.escape.penne
    - match: '\\.'
      scope: constant.character.escape.penne
    - match: "'"
      scope: punctuation.definition.string.end.penne
      pop: true
    - match: '\\$'
      scope: invalid.illegal.trailing-backslash
      pop: true
    - match: $
      pop: true

  comments:
    - match: '//'
      scope: punctuation.definition.comment.penne
      push: line_comment

  line_comment:
    - meta_scope: comment.line.penne
    - match: $
      pop: true

  preprocessor_directive:
    - meta_scope: invalid.illegal.debug.penne
    - match: $
      pop: true

  var_declaration:
    - match: ':(?!:)'
      scope: punctuation.separator.penne
      push:
        - match: '(?=,|;|=)'
          pop: true
        - include: type
    - match: '(?=;|=)'
      set: var_initialization

  var_initialization:
    - include: expressions
    - match: '(?=;)'
      pop: true

  const_declaration:
    - match: '{{identifier}}'
      scope: variable.other.constant.penne
      set: var_declaration

  fn_definition:
    - meta_scope: meta.function.penne
    - match: '{{identifier}}'
      scope: entity.name.function.penne
      set: fn_generic

  fn_generic:
    - match: '(?=\()'
      set: fn_parameters

  fn_parameters:
    - meta_scope: meta.function.penne
    - match: '\)'
      scope: meta.function.parameters.penne punctuation.definition.parameters.end.penne
      set: fn_return
    - match: '\('
      scope: punctuation.definition.parameters.begin.penne
      push:
        - meta_scope: meta.function.parameters.penne
        - match: '(?=\))'
          pop: true
        - include: pattern_param

  pattern_param:
    - match: '\b{{identifier}}\b'
      scope: variable.parameter.penne
    - match: ':(?!:)'
      scope: punctuation.separator.penne
      push:
        - match: '(?=,|\)|\}|\|)'
          pop: true
        - match: '\('
          push:
            - include: type
            - match: '\)'
              pop: true
        - include: type

  fn_return:
    - meta_scope: meta.function.penne
    - match: ';'
      scope: punctuation.terminator.penne
      pop: true
    - match: '(?=\{)'
      set: fn_body
    - include: return_type

  return_type:
    - match: '->'
      scope: punctuation.separator.penne
      push:
        - meta_scope: meta.function.return-type.penne
        - include: type
        - match: '(?=\S)'
          pop: true

  fn_body:
    - meta_scope: meta.function.penne
    - match: '\}'
      scope: meta.block.penne punctuation.definition.block.end.penne
      pop: true
    - match: '\{'
      scope: punctuation.definition.block.begin.penne
      push:
        - meta_scope: meta.block.penne
        - match: '(?=\})'
          pop: true
        - include: statements

  block:
    - match: '\}'
      scope: meta.block.penne punctuation.definition.block.end.penne
      pop: true
    - match: '\{'
      scope: meta.block.penne punctuation.definition.block.begin.penne
      push: block_body

  block_body:
    - meta_scope: meta.block.penne
    - match: '(?=\})'
      pop: true
    - include: statements

  struct_declaration:
    - meta_scope: meta.struct.penne
    - match: '{{identifier}}'
      scope: entity.name.struct.penne
      set: struct_definition

  struct_definition:
    - meta_scope: meta.struct.penne
    - match: '\}'
      scope: meta.block.penne punctuation.definition.block.end.penne
      pop: true
    - match: '\{'
      scope: punctuation.definition.block.begin.penne
      push: struct_body
    - match: '(?=\S)'
      # Abort for an invalid match.
      pop: true

  struct_body:
    - meta_scope: meta.block.penne
    - match: '(?=\})'
      pop: true
    - include: comments
    - match: '{{identifier}}(?=\s*:)'
      scope: variable.other.member.penne
      push:
        - match: ',|(?=\})'
          pop: true
        - include: comments
        - match: ':'
          scope: punctuation.separator.penne
        - include: type
    - match: '(?=\S)'
      # Abort for an invalid match.
      pop: true

  struct_initialization:
    - match: '\}'
      scope: meta.block.penne punctuation.definition.block.end.penne
      pop: true
    - match: '\{'
      scope: meta.block.penne punctuation.definition.block.begin.penne
      push: struct_member_initialization
    - match: '(?=\S)'
      # Abort for an invalid match.
      pop: true

  struct_member_initialization:
    - meta_scope: meta.block.penne
    - match: '(?=\})'
      pop: true
    - include: comments
    - match: '{{identifier}}'
      scope: variable.other.member.penne
      push:
        - match: ',|(?=\})'
          pop: true
        - include: comments
        - match: ':'
          scope: punctuation.separator.penne
        - include: expression
    - match: '(?=\S)'
      # Abort for an invalid match.
      pop: true

#  array:
#    - match: '\]'
#      scope: meta.brackets.penne punctuation.section.brackets.end.penne
#      pop: true
#    - match: '\['
#      scope: meta.brackets.penne punctuation.section.brackets.begin.penne
#      push: array_body
#
#  array_body:
#    - meta_scope: meta.brackets.penne
#    - match: '(?=\])'
#      pop: true
#    - include: expressions
#
#  array_type:
#    - match: '\]'
#      scope: storage.type.penne meta.brackets.penne punctuation.section.brackets.end.penne
#      pop: true
#    - match: '\['
#      scope: storage.type.penne meta.brackets.penne punctuation.section.brackets.begin.penne
#      push: array_type_body
#
#  array_type_body:
#    - meta_scope: storage.type.penne meta.brackets.penne
#    - include: expressions
#    - include: type
#    - match: '(?=\])'
#      pop: true

  type:
    - match: \b({{int_suffixes}}|{{float_suffixes}}|bool|char)\b
      scope: storage.type.penne
    - include: expressions
