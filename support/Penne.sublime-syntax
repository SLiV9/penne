%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Penne
file_extensions:
  - pn
scope: source.penne

variables:
  identifier: '[[:alpha:]][_[:alnum:]]*|_[_[:alnum:]]+'
  int_suffixes: '[iu](8|16|32|64|128|size)'
  float_suffixes: 'f(32|64)'
  word_x: 'word8|word16|word32|word64|word128'
  type_keyword: 'void|{{int_suffixes}}|{{float_suffixes}}|bool|struct|{{word_x}}'
  literal_keyword: 'true|false'
  hard_keyword: 'fn|var|const|if|goto|loop|else|cast|as|import|pub|extern'
  keyword: '{{hard_keyword}}|{{type_keyword}}|{{literal_keyword}}'

contexts:
  main:
    - include: comments
    - match: '\$'
      push: preprocessor_directive
    - match: '"'
      scope: punctuation.definition.string.begin.penne
      push: double_quoted_string
    - match: "'"
      scope: punctuation.definition.string.begin.penne
      push: single_quoted_string
    - match: '\b((-)?[0-9][.0-9_]*)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.penne
        3: storage.type.numeric.penne
    - match: '\b(0x[0-9a-fA-F_]+)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.penne
        2: storage.type.numeric.penne
    - match: '\b(0b[01_]+)({{int_suffixes}})?\b'
      captures:
        1: constant.numeric.penne
        2: storage.type.numeric.penne
    - match: '\b(true|false)\b'
      scope: constant.language.penne
    - match: '\b(var|const|fn|struct|{{word_x}})\s+(?=({{keyword}})\b)\b'
      scope: keyword.other.penne
    - match: '\b(var)\s+({{identifier}})\b'
      captures:
        1: keyword.other.penne
    - match: '\b(const)\s+({{identifier}})\b'
      captures:
        1: storage.modifier.penne keyword.declaration.other.penne
        2: variable.other.constant.penne
    - match: '\b(fn)\s+({{identifier}})\b'
      captures:
        1: storage.type.function.penne keyword.declaration.function.penne
        2: entity.name.function.penne
      push: fn_signature
    - match: '\b(struct|{{word_x}})\s+({{identifier}})\b'
      captures:
        1: storage.type.struct.penne keyword.declaration.struct.penne
        2: entity.name.struct.penne
    - match: '\b({{keyword}})\s*(?=\{)'
      captures:
        1: invalid.illegal.penne
      push: structural
    - match: '\b({{identifier}})\s*(?=\{)'
      push: structural
    - include: keywords

  keywords:
    - match: \b({{int_suffixes}}|{{float_suffixes}})\b
      scope: storage.type.numeric.penne
    - match: \b(bool|void)\b
      scope: storage.type.penne
    - match: '\b(pub|extern)\b'
      scope: storage.modifier.penne
    - match: '\b(import)\b'
      scope: keyword.control.import.penne
    - match: '\b(const)\b'
      scope: keyword.declaration.other.penne storage.modifier.penne
    - match: '\b(fn)\b'
      scope: keyword.declaration.function.penne storage.type.function.penne
    - match: '\b(struct|{{word_x}})\b'
      scope: keyword.declaration.struct.penne storage.type.struct.penne
    - match: '\b(if|else)\b'
      scope: keyword.control.conditional.penne
    - match: '\b(loop|goto)\b'
      scope: keyword.control.penne
    - match: '\b(var)\b'
      scope: keyword.other.penne
    - match: '\b(cast|as)\b'
      scope: keyword.operator.word.penne
    - match: '\b(true|false)\b'
      scope: constant.language.penne

  double_quoted_string:
    - meta_scope: string.quoted.double.penne
    - match: '\\x[0-9a-fA-F]{2}'
      scope: constant.character.escape.penne
    - match: '\\u\{[0-9a-fA-F]{1,}\}'
      scope: constant.character.escape.penne
    - match: '\\.'
      scope: constant.character.escape.penne
    - match: '"'
      scope: punctuation.definition.string.end.penne
      pop: true
    - match: '\\$'
      scope: invalid.illegal.trailing-backslash
      pop: true
    - match: $
      pop: true

  single_quoted_string:
    - meta_scope: string.quoted.single.penne
    - match: '\\x[0-9a-fA-F]{2}'
      scope: constant.character.escape.penne
    - match: '\\.'
      scope: constant.character.escape.penne
    - match: "'"
      scope: punctuation.definition.string.end.penne
      pop: true
    - match: '\\$'
      scope: invalid.illegal.trailing-backslash
      pop: true
    - match: $
      pop: true

  comments:
    - match: '//'
      scope: punctuation.definition.comment.penne
      push: line_comment

  line_comment:
    - meta_scope: comment.line.penne
    - match: $
      pop: true

  preprocessor_directive:
    - meta_scope: invalid.illegal.debug.penne
    - match: $
      pop: true

  fn_signature:
    - match: '(?=\{)'
      set: block
    - match: ';'
      pop: true
    - include: main

  block:
    - match: '\}'
      pop: true
    - match: '\{'
      push: block_body

  block_body:
    - match: '(?=\})'
      pop: true
    - match: '(?=\{)'
      push: block
    - match: '\b({{keyword}}):'
      captures:
        1: invalid.illegal.penne
    - match: '\b({{identifier}}):'
      scope: entity.name.label.penne
    - include: main

  structural:
    - match: '\}'
      pop: true
    - match: '\{'
      push: structural_body

  structural_body:
    - match: '(?=\})'
      pop: true
    - include: main
