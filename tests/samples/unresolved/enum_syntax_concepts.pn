
enum8 Color
{
	RED, // 1
	GREEN, // 2
	BLUE, // 3
}

fn foo()
{
	// What should be the type of x? Color? u8? Or "?Color"?
	var x;

	// Instead of switch statements there is the jump table:
	if x is Color
	{
		// x is now known to be a valid Color value, so we can safely jump.
		goto x;
		Color::RED:
		{
			// ...
			// Do we need a break statement here?
			// Even though "goto end;" is consistent, it seems too verbose.
		}
		// Color:: can be omitted because we are inside a jump table.
		GREEN:
		{
			// ...
		}
		BLUE:
		{
			// ...
		}
	}
	else
	{
		// Optional else.
	}
}

fn alternatively()
{
	var x: Color;

	// This looks nice except that it violates the concept that gotos may only
	// jump out of a scope. Seeing this indentation should be suspicious.
	// I guess the lack of semicolon means something?
	goto x
	{
		RED:
		{
			// ...
		}
		GREEN:
		{
			// ...
		}
		BLUE:
		{
			// ...
		}
	}
	else nothing;
}

fn experimental_concept_union_types()
{
	var x;
	if x :: Color
	{

	}
	// ...
	if x !: Color
	{

	}
}

fn tagged_unions()
{
	var x;
	{
		goto x.type;
		Foo:
		{
			// x.data is known to be a Foo here
		}
		Bar:
		{
			// same but with Bar
		}
	}
}

union FooOrBar
{
	// Foo: Foo,
	Foo,
	// Bar: Bar,
	Bar,
}

fn tagged_unions_with_symbol()
{
	var x: FooOrBar;
	{
		// (Some syntax similar to |x|, or maybe just x itself?)
		goto x;
		Foo:
		{
			// x is known to be a Foo here
		}
		Bar:
		{
			// same but with Bar
		}
	}
}

// In a union, member names *are* labels.
union DistanceOrColor
{
	distance: i32,
	color: Color,
}

fn tagged_unions_with_labels()
{
	var x: DistanceOrColor;
	goto x;
	distance:
	{
		// x is known to be i32 here
		// ...
		goto end;
	}
	color:
	// same but with Color
	// ...
	// hmm but where does that knowledge end?
	// and how do we know there are no other jumps into this?
	goto end;
	end:
}

fn enums_are_empty_unions()
{
	var x: Color;
	goto x;
	RED:
	{
		// x == RED
		// ...
		goto end;
	}
	BLUE:
	{
		// x == BLUE
		// ...
		goto end;
	}
	GREEN:
	{
		// x == BLUE
		// ...
		goto end;
	}
	end:
}

fn hmmmmmm()
{
	var x: DistanceOrColor;
	var y: DistanceOrColor;
	if condition == true
		goto x;
	else
		goto y;
	distance:
	{
		// Do we have x or y here?!?
		// But I guess that's just a syntax error a la DuplicateLabel
		goto end;
	}
	color:
	end:
}

fn ok()
{
	var x: Color;
	var y: Color;
	if condition == true
		goto x;
	else
		goto y;
	RED:
	{
		// This is fine, either x or y is RED.
		// Neither x nor y are known to be RED.
		// ...
		goto end;
	}
	BLUE:
	// ...
	end:
}
