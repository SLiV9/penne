const SCREEN_SIZE: u32 = 160;
const DRAW_COLORS: &u16 = 0x14;
const FRAMEBUFFER: &[6400]u8 = 0xa0;

fn pixel(x: i32, y: i32)
{
    // The logical offset into the framebuffer that corresponds with (x, y).
    var offset = y as u32 * SCREEN_SIZE + x as u32;

    // The byte index into the framebuffer that contains (x, y).
    var byte_offset = offset >> 2;
    var idx = byte_offset as usize;

    // Calculate the bits within the byte that corresponds to our position.
    var bits = x as u32 & 0b11;
    var shift = bits as u8 << 1;
    var mask = 0b11 << shift;

    // Use the first DRAW_COLOR as the pixel color.
    var palette_color = DRAW_COLORS & 0b1111;
    if palette_color == 0
    {
        // Transparent
        goto end;
    }
    var palette_color_offset = palette_color - 1;
    var color = palette_color_offset as u8 & 0b11;

    // Write to the framebuffer.
    var new_bits = color << shift;
    var old_bits = FRAMEBUFFER[idx] & !mask;
    FRAMEBUFFER[idx] = new_bits | old_bits;

    end:
}
