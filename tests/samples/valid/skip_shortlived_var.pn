fn main() -> i32
{
	var result = 200;
	goto return;
	var x = 400;
	result = x;
	return: result
}

fn main_with_unrelated_label() -> i32
{
	var result = 200;
	goto return;
	var x = 400;
	unrelated_label:
	result = x;
	return: result
}

fn main_with_suggestive_blocks() -> i32
{
	var result = 200;
	goto return;
	{
		var x = 400;
		result = x;
	}
	return: result
}

fn dependent(input: i32) -> i32
{
	var result = 200;
	if input == 1
		goto return;
	var x = 400;
	if input == 2
		goto return;
	result = x;
	return: result
}

fn dependent_with_suggestive_blocks(input: i32) -> i32
{
	var result = 200;
	if input == 1
		goto return;
	{
		var x = 400;
		if input == 2
			goto return;
		{
			result = x;
		}
	}
	return: result
}

fn containing_loop(input: i32) -> i32
{
	var result = 200;
	var i = 0;
	{
		if i == input
			goto return;
		var x = 400;
		result = x;
		i = i + 1;
		loop;
	}
	return: result
}

fn containing_loop_with_suggestive_blocks(input: i32) -> i32
{
	var result = 200;
	var i = 0;
	{
		if i == input
			goto return;
		{
			var x = 400;
			result = x;
			i = i + 1;
		}
		loop;
	}
	return: result
}

fn overlapping(input: i32) -> i32
{
	var result = 200;
	if input == 0
		goto return;
	if input == 1
		goto next;
	var a = 20;
	result = result + a;
	if input == 2
		goto return;
	next:
	var b = 10;
	result = result + b;
	return: result
}

fn overlapping_with_suggestive_blocks(input: i32) -> i32
{
	var result = 200;
	if input == 0
		goto return;
	{
		if input == 1
			goto next;
		{
			var a = 20;
			result = result + a;
			if input == 2
				goto return;
		}
		next:
		{
			var b = 10;
			result = result + b;
		}
	}
	return: result
}
